import { ICheckBoxBaseInput } from '@core/fields/check-box-base-input/check-box-base-input.types'
import { IClickBaseInput } from '@core/fields/click-base-input/click-base-input.types'
import { IDrawerBaseInput } from '@core/fields/drawer-base-input/drawer-base-input.types'
import { IDependencyConfiguration } from '@core/fields/field-base-input/configuration/dependency-configuration'
import { IFieldStateStyle } from '@core/fields/field-state-style/field-state-style.types'
import { IRadioBaseInput } from '@core/fields/radio-base-input/radio-base-input.types'
import { ITextBaseInput } from '@core/fields/text-base-input/text-base-input.types'

// export const ValueStrategy = function (
//     this: IValueStrategy,
//     constructor: IDependencyConfiguration
// ) {
//     if (constructor.type === 'new') {
//         this.field = new FieldInput(constructor.output as IFieldDescriptor)
//     }
//     if (constructor.type === 'inherits') {
//         this.field = constructor.output as IFieldBaseInput
//     }

//     // Extend the prototype of FieldStateStyle with FieldInput's prototype
//     Object.setPrototypeOf(ValueStrategy.prototype, FieldInput.prototype)

//     if (this.field.initializeBase(constructor.configuration)) {
//         this.initialize()
//         this.valueStrategies = []
//     } else {
//         throw Error(`The initialization failed ${ValueStrategy.name}`)
//     }
// } as any as IValueStrategy

export const TextBaseInput = function (
    this: ITextBaseInput,
    constructor: IDependencyConfiguration
) {
    // if (constructor.type === 'new') {
    //     this.field = new FieldInput(constructor.output as IFieldDescriptor)
    // }
    // if (constructor.type === 'inherits') {
    //     this.field = constructor.output as IFieldBaseInput
    // }
    // Object.setPrototypeOf(TextBaseInput.prototype, FieldInput.prototype)
    // if (this.field.initializeBase(constructor.configuration)) {
    //     this.initialize()
    // } else {
    //     throw Error(`The initialization failed ${TextBaseInput.name}`)
    // }
} as any as ITextBaseInput

// export const SelectBaseInput = function (
//     this: ISelectBaseInput,
//     constructor: IDependencyConfiguration
// ) {
//     if (constructor.type === 'new') {
//         this.field = new FieldInput(constructor.output as IFieldDescriptor)
//         this.clickBase = new ClickBaseInput()
//         this.optionBase = new OptionBaseInput()
//     }
//     if (constructor.type === 'inherits') {
//         this.field = constructor.output as IFieldBaseInput
//         this.clickBase = new ClickBaseInput()
//         this.optionBase = new OptionBaseInput()
//     }

//     // Extend the prototype of FieldStateStyle with FieldInput's prototype
//     Object.setPrototypeOf(SelectBaseInput.prototype, FieldInput.prototype)

//     if (this.field.initializeBase(constructor.configuration)) {
//         this.initialize()
//     } else {
//         throw Error(`The initialization failed ${SelectBaseInput.name}`)
//     }
// } as any as ISelectBaseInput

export const RadioBaseInput = function (
    this: IRadioBaseInput,
    constructor: IDependencyConfiguration
) {
    // if (constructor.type === 'new') {
    //     this.field = new FieldInput(constructor.output as IFieldDescriptor)
    //     this.clickBase = new ClickBaseInput()
    //     this.optionBase = new OptionBaseInput()
    // }
    // if (constructor.type === 'inherits') {
    //     this.field = constructor.output as IFieldBaseInput
    //     this.clickBase = new ClickBaseInput()
    //     this.optionBase = new OptionBaseInput()
    // }
    // // Extend the prototype of FieldStateStyle with FieldInput's prototype
    // Object.setPrototypeOf(RadioBaseInput.prototype, FieldInput.prototype)
    // if (this.field.initializeBase(constructor.configuration)) {
    //     this.initialize()
    // } else {
    //     throw Error(`The initialization failed ${RadioBaseInput.name}`)
    // }
} as any as IRadioBaseInput

// export const OptionBaseInput = function (
//     this: IOptionBaseInput,
//     constructor: IDependencyConfiguration
// ) {
//     if (constructor.type === 'new') {
//         this.field = new FieldInput(constructor.output as IFieldDescriptor)
//     }
//     if (constructor.type === 'inherits') {
//         this.field = constructor.output as IFieldBaseInput
//     }

//     // Extend the prototype of FieldStateStyle with FieldInput's prototype
//     Object.setPrototypeOf(OptionBaseInput.prototype, FieldInput.prototype)

//     if (this.field.initializeBase(constructor.configuration)) {
//         this.options = constructor.output?.options ?? []
//         this.initialize()
//     } else {
//         throw Error(`The initialization failed ${OptionBaseInput.name}`)
//     }
// } as any as IOptionBaseInput

export const FieldStateStyle = function (
    this: IFieldStateStyle,
    constructor: IDependencyConfiguration
) {
    // if (constructor.type === 'new') {
    //     this.field = new FieldInput(constructor.output as IFieldDescriptor)
    // }
    // if (constructor.type === 'inherits') {
    //     this.field = constructor.output as IFieldBaseInput
    // }
    // // Extend the prototype of FieldStateStyle with FieldInput's prototype
    // Object.setPrototypeOf(FieldStateStyle.prototype, FieldInput.prototype)
    // if (this.field.initializeBase(constructor.configuration)) {
    //     this.initialize()
    //     this.className = ''
    //     this.classesList = new Map<FieldInputStateType, string>([
    //         ['dirty', 'is-not-dirty'],
    //         ['errors', 'no-errors'],
    //         ['focus', 'is-not-focus'],
    //         ['open', 'is-closed'],
    //         ['pristine', 'is-pristine'],
    //         ['valid', 'is-valid'],
    //         ['required', 'required']
    //     ])
    // } else {
    //     throw Error(`The initialization failed ${FieldStateStyle.name}`)
    // }
} as any as IFieldStateStyle

export const DrawerBaseInput = function (
    this: IDrawerBaseInput,
    constructor: IDependencyConfiguration
) {
    // if (constructor.type === 'new') {
    //     this.field = new FieldInput(constructor.output as IFieldDescriptor)
    // }
    // if (constructor.type === 'inherits') {
    //     this.field = constructor.output as IFieldBaseInput
    // }
    // Object.setPrototypeOf(DrawerBaseInput.prototype, FieldInput.prototype)
    // if (this.field.initializeBase(constructor.configuration)) {
    //     this.initialize()
    // } else {
    //     throw Error(`The initialization failed ${DrawerBaseInput.name}`)
    // }
    // Extend the prototype of FieldStateStyle with FieldInput's prototype
} as any as IDrawerBaseInput

export const ClickBaseInput = function (
    this: IClickBaseInput,
    constructor: IDependencyConfiguration
) {
    // if (constructor.type === 'new') {
    //     this.field = new FieldInput(constructor.output as IFieldDescriptor)
    // }
    // if (constructor.type === 'inherits') {
    //     this.field = constructor.output as IFieldBaseInput
    // }
    // // Extend the prototype of FieldStateStyle with FieldInput's prototype
    // Object.setPrototypeOf(ClickBaseInput.prototype, FieldInput.prototype)
    // if (this.field.initializeBase(constructor.configuration)) {
    //     this.initialize()
    // } else {
    //     throw Error(`The initialization failed ${ClickBaseInput.name}`)
    // }
} as any as IClickBaseInput

export const CheckBoxInput = function (
    this: ICheckBoxBaseInput,
    constructor: IDependencyConfiguration
) {
    // if (constructor.type === 'new') {
    //     this.field = new FieldInput(constructor.output as IFieldDescriptor)
    //     this.clickBase = new ClickBaseInput()
    // }
    // if (constructor.type === 'inherits') {
    //     this.field = constructor.output as IFieldBaseInput
    //     this.clickBase = new ClickBaseInput()
    // }
    // // Extend the prototype of FieldStateStyle with FieldInput's prototype
    // Object.setPrototypeOf(CheckBoxInput.prototype, FieldInput.prototype)
    // if (this.field.initializeBase(constructor.configuration)) {
    //     this.initialize()
    //     this.checked = undefined
    // } else {
    //     throw Error(`The initialization failed ${ClickBaseInput.name}`)
    // }
} as any as ICheckBoxBaseInput

// export const initializeBase = function (
//     this: IFieldBaseInput,
//     params: IFieldBuilderParameters
// ): boolean {
//     let check: IInitilizationCheckResult = defaultPrecheck
//     try {
//         check = this.checkInitialized()
//         if (!check.success) {
//             this.useTracking(params.trackingStrategies)
//                 .useNotifier(params.notifierInstance)
//                 .useDommable()
//                 .useValidationStrategy(params.descriptor, ...params.validationStrategies)
//                 .useStyler()
//                 .useDrawerableState()
//                 .useValueStrategy(...params.valueStrategies)
//         }

//         check = this.checkInitialized()

//         if (!check.success) {
//             generalExceptionHandler(undefined, 'critical', this.name, check.errors.join('\n'))
//         }
//         return check.success
//     } catch (e: any) {
//         generalExceptionHandler(
//             undefined,
//             'critical',
//             this.name,
//             `an error has occured when initializing initializeBase ${this.name} class: ${e.message}`
//         )
//         return false
//     }
// }
