import { DomManager } from '@core/DomManager/DomManager'
import { IDomManager } from '@core/DomManager/DomManager.types'
import { DrawerBaseInput } from '@core/fields/drawer-base-input/drawer-base-input'
import { IDrawerBaseInput } from '@core/fields/drawer-base-input/drawer-base-input.types'
import { FieldStateStyle } from '@core/fields/field-state-style/field-state-style'
import { IFieldStateStyle } from '@core/fields/field-state-style/field-state-style.types'
import { FieldDataTypes } from '@core/framework/common/common.field.data.types'
import { generalExceptionHandler } from '@core/general-exception-handler/genaral-exception-handler'
import { NotifiableEntity } from '@core/notifiable-entity/notifiable-entity'
import { INotifiableEntity } from '@core/notifiable-entity/notifiable-entity-base.types'
import { Tracker } from '@core/tracker/tracker'
import { ITracker, TrackingType } from '@core/tracker/tracker.types'
import { ValidationStrategy } from '@core/validation-strategy/validation-strategy'
import { IValidationStrategy } from '@core/validation-strategy/validation-strategy.types'
import { ValueStrategy } from '@core/value-strategy/value-strategy'
import { IValueStrategy } from '@core/value-strategy/value-strategy.types'
import { IFieldInputExtended } from '../field-input-base-types'

export type DependencyKeys =
    | 'dom'
    | 'drawer'
    | 'notifier'
    | 'style'
    | 'tracker'
    | 'validation'
    | 'value'
    | 'defaultDependencyAccessor'

export type AccessorsTypes =
    | IDomManager<HTMLInputElement>
    | INotifiableEntity
    | IFieldStateStyle
    | IValidationStrategy
    | IValueStrategy
    | FieldDataTypes
    | undefined

export const handleMissingDependency = (dependencyKey: string): void => {
    generalExceptionHandler(undefined, 'info', dependencyKey, 'must be initialized initialized')
}

export interface IAccessors {
    [key: string]: any
    /** message helper method : uses tracker and fallbacks to console */
    message: (type: TrackingType, source: string, message: string) => void
    /** Dependency accessors */
    dom(): IDomManager<HTMLInputElement> | undefined
    notifier: () => INotifiableEntity | undefined
    style: () => IFieldStateStyle | undefined
    track: () => ITracker | undefined
    drawer: () => IDrawerBaseInput | undefined
    validationStrategy: () => IValidationStrategy | undefined
    valueStrategy: () => IValueStrategy | undefined
    setValue: (value: FieldDataTypes) => void
    getValue: () => FieldDataTypes
}

export interface IDefaultDependency {}

export const defaultDependencyAccessor: IDefaultDependency = {}

export const createValueAccessor = (): IValueStrategy | undefined => {
    const _valueStrategie = new ValueStrategy()
    generalExceptionHandler(undefined, 'info', createValueAccessor.name, 'initialized')
    return _valueStrategie
}

export const createValidatonAccessor = (): IValidationStrategy | undefined => {
    const _validationStrategy = new ValidationStrategy()
    generalExceptionHandler(undefined, 'info', createValidatonAccessor.name, 'initialized')
    return _validationStrategy
}

export const createDrawerAccessor = (): IDrawerBaseInput | undefined => {
    const _drwer = new DrawerBaseInput()
    generalExceptionHandler(undefined, 'info', createDrawerAccessor.name, 'initialized')
    return _drwer
}

export const createTrackerAccessor = (): ITracker | undefined => {
    const _tracker = new Tracker()
    generalExceptionHandler(_tracker, 'info', createTrackerAccessor.name, 'initialized')
    return _tracker
}

export const createNotifierAccessor = (): INotifiableEntity | undefined => {
    const _ne = new NotifiableEntity()
    generalExceptionHandler(undefined, 'info', createNotifierAccessor.name, 'initialized')
    return _ne
}

export const createStyleAccessor = () => {
    const _s = new FieldStateStyle()
    generalExceptionHandler(undefined, 'info', createStyleAccessor.name, 'initialized')
    return _s
}

export const createDomAccessor = (): IDomManager<HTMLInputElement> | undefined => {
    const _dom = new DomManager()
    generalExceptionHandler(undefined, 'info', createDomAccessor.name, 'initialized')
    return _dom
}

export const accessorsRegistry = (dependencyKey: DependencyKeys) => {
    switch (dependencyKey) {
        case 'dom':
            return createDomAccessor()
        case 'value':
            return createValueAccessor()
        case 'validation':
            return createValidatonAccessor()
        case 'drawer':
            return createDrawerAccessor()
        case 'notifier':
            return createNotifierAccessor()
        case 'style':
            return createStyleAccessor()
        case 'tracker':
            return createTrackerAccessor()
        default: {
            console.error(`Missing dependency: ${dependencyKey} in field:`)
            handleMissingDependency(dependencyKey)
        }
    }
}

const dependencyConfig: Record<DependencyKeys, string> = {
    tracker: '_tracker must be initialized',
    notifier: '_notifier must be initialized',
    dom: '_dom must be initialized',
    drawer: '_drawer must be initialized',
    style: '_style must be initialized',
    validation: '_validation must be initialized',
    value: '_value must be initialized',
    defaultDependencyAccessor: ''
}

export const createAccessor = (field: IFieldInputExtended): IAccessors => {
    console.log('Field object:', field) // Debugging

    const accessors: Partial<IAccessors> = {}
    for (const [key] of Object.entries(dependencyConfig)) {
        accessors[key as DependencyKeys] = accessorsRegistry(key as DependencyKeys)
    }
    return {
        ...accessors,
        setValue: (value: FieldDataTypes) => {
            field?.valueStrategy?.()?.setValue(value)
        },
        getValue: () => {
            return field?.valueStrategy?.()?.getValue() ?? null
        },
        message: (type: TrackingType, source: string, message: string) => {
            generalExceptionHandler(field._tracker, type, source, message)
        }
    } as IAccessors
}
