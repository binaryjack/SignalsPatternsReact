export interface IValidationTextBase {
    error?: string
    guide?: string
}

export interface IRequired extends IValidationTextBase {
    required: boolean
}

export interface IMax extends IValidationTextBase {
    max: number
}

export interface IMin extends IValidationTextBase {
    min: number
}

export interface IMaxLength extends IValidationTextBase {
    maxLength: number
}

export interface IMinLength extends IValidationTextBase {
    minLength: number
}

export interface IPattern extends IValidationTextBase {
    pattern: string
}

export interface IValidationOptions {
    required?: IRequired
    min?: IMin
    max?: IMax
    minLength?: IMinLength
    maxLength?: IMaxLength
    pattern?: IPattern
}

export const isRequired = (required: boolean, error?: string, guide?: string): IRequired => {
    return {
        required,
        error,
        guide
    }
}

export const hasMin = (min: number, error?: string, guide?: string): IMin => {
    return {
        min,
        error,
        guide
    }
}

export const hasMax = (max: number, error?: string, guide?: string): IMax => {
    return {
        max,
        error,
        guide
    }
}

export const hasMinLength = (minLength: number, error?: string, guide?: string): IMinLength => {
    return {
        minLength,
        error,
        guide
    }
}

export const hasMaxLength = (maxLength: number, error?: string, guide?: string): IMaxLength => {
    return {
        maxLength,
        error,
        guide
    }
}

export const hasPattern = (pattern: string, error?: string, guide?: string): IPattern => {
    return {
        pattern,
        error,
        guide
    }
}

export const ValidationErrorsCodes = {
    min: 'MIN_ERROR',
    max: 'MAX_ERROR',
    minLength: 'MIN_LENGTH_ERROR',
    maxLength: 'MAX_LENGTH_ERROR',
    required: 'REQUIRED',
    custom: 'CUSTOM'
}
